// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.19.6
// source: backend.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusResponse_State int32

const (
	StatusResponse_UNINITIALIZED StatusResponse_State = 0
	StatusResponse_BUSY          StatusResponse_State = 1
	StatusResponse_READY         StatusResponse_State = 2
	StatusResponse_ERROR         StatusResponse_State = -1
)

// Enum value maps for StatusResponse_State.
var (
	StatusResponse_State_name = map[int32]string{
		0:  "UNINITIALIZED",
		1:  "BUSY",
		2:  "READY",
		-1: "ERROR",
	}
	StatusResponse_State_value = map[string]int32{
		"UNINITIALIZED": 0,
		"BUSY":          1,
		"READY":         2,
		"ERROR":         -1,
	}
)

func (x StatusResponse_State) Enum() *StatusResponse_State {
	p := new(StatusResponse_State)
	*p = x
	return p
}

func (x StatusResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_backend_proto_enumTypes[0].Descriptor()
}

func (StatusResponse_State) Type() protoreflect.EnumType {
	return &file_backend_proto_enumTypes[0]
}

func (x StatusResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusResponse_State.Descriptor instead.
func (StatusResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{8, 0}
}

type ModelOptions struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Model             string                 `protobuf:"bytes,1,opt,name=Model,proto3" json:"Model,omitempty"`
	ContextSize       int32                  `protobuf:"varint,2,opt,name=ContextSize,proto3" json:"ContextSize,omitempty"`
	Seed              int32                  `protobuf:"varint,3,opt,name=Seed,proto3" json:"Seed,omitempty"`
	NBatch            int32                  `protobuf:"varint,4,opt,name=NBatch,proto3" json:"NBatch,omitempty"`
	F16Memory         bool                   `protobuf:"varint,5,opt,name=F16Memory,proto3" json:"F16Memory,omitempty"`
	MLock             bool                   `protobuf:"varint,6,opt,name=MLock,proto3" json:"MLock,omitempty"`
	MMap              bool                   `protobuf:"varint,7,opt,name=MMap,proto3" json:"MMap,omitempty"`
	VocabOnly         bool                   `protobuf:"varint,8,opt,name=VocabOnly,proto3" json:"VocabOnly,omitempty"`
	LowVRAM           bool                   `protobuf:"varint,9,opt,name=LowVRAM,proto3" json:"LowVRAM,omitempty"`
	Embeddings        bool                   `protobuf:"varint,10,opt,name=Embeddings,proto3" json:"Embeddings,omitempty"`
	NUMA              bool                   `protobuf:"varint,11,opt,name=NUMA,proto3" json:"NUMA,omitempty"`
	NGPULayers        int32                  `protobuf:"varint,12,opt,name=NGPULayers,proto3" json:"NGPULayers,omitempty"`
	MainGPU           string                 `protobuf:"bytes,13,opt,name=MainGPU,proto3" json:"MainGPU,omitempty"`
	TensorSplit       string                 `protobuf:"bytes,14,opt,name=TensorSplit,proto3" json:"TensorSplit,omitempty"`
	Threads           int32                  `protobuf:"varint,15,opt,name=Threads,proto3" json:"Threads,omitempty"`
	LibrarySearchPath string                 `protobuf:"bytes,16,opt,name=LibrarySearchPath,proto3" json:"LibrarySearchPath,omitempty"`
	RopeFreqBase      float32                `protobuf:"fixed32,17,opt,name=RopeFreqBase,proto3" json:"RopeFreqBase,omitempty"`
	RopeFreqScale     float32                `protobuf:"fixed32,18,opt,name=RopeFreqScale,proto3" json:"RopeFreqScale,omitempty"`
	RMSNormEps        float32                `protobuf:"fixed32,19,opt,name=RMSNormEps,proto3" json:"RMSNormEps,omitempty"`
	NGQA              int32                  `protobuf:"varint,20,opt,name=NGQA,proto3" json:"NGQA,omitempty"`
	ModelFile         string                 `protobuf:"bytes,21,opt,name=ModelFile,proto3" json:"ModelFile,omitempty"`
	// AutoGPTQ
	Device           string `protobuf:"bytes,22,opt,name=Device,proto3" json:"Device,omitempty"`
	UseTriton        bool   `protobuf:"varint,23,opt,name=UseTriton,proto3" json:"UseTriton,omitempty"`
	ModelBaseName    string `protobuf:"bytes,24,opt,name=ModelBaseName,proto3" json:"ModelBaseName,omitempty"`
	UseFastTokenizer bool   `protobuf:"varint,25,opt,name=UseFastTokenizer,proto3" json:"UseFastTokenizer,omitempty"`
	// Diffusers
	PipelineType  string  `protobuf:"bytes,26,opt,name=PipelineType,proto3" json:"PipelineType,omitempty"`
	SchedulerType string  `protobuf:"bytes,27,opt,name=SchedulerType,proto3" json:"SchedulerType,omitempty"`
	CUDA          bool    `protobuf:"varint,28,opt,name=CUDA,proto3" json:"CUDA,omitempty"`
	CFGScale      float32 `protobuf:"fixed32,29,opt,name=CFGScale,proto3" json:"CFGScale,omitempty"`
	IMG2IMG       bool    `protobuf:"varint,30,opt,name=IMG2IMG,proto3" json:"IMG2IMG,omitempty"`
	CLIPModel     string  `protobuf:"bytes,31,opt,name=CLIPModel,proto3" json:"CLIPModel,omitempty"`
	CLIPSubfolder string  `protobuf:"bytes,32,opt,name=CLIPSubfolder,proto3" json:"CLIPSubfolder,omitempty"`
	CLIPSkip      int32   `protobuf:"varint,33,opt,name=CLIPSkip,proto3" json:"CLIPSkip,omitempty"`
	ControlNet    string  `protobuf:"bytes,48,opt,name=ControlNet,proto3" json:"ControlNet,omitempty"`
	Tokenizer     string  `protobuf:"bytes,34,opt,name=Tokenizer,proto3" json:"Tokenizer,omitempty"`
	// LLM (llama.cpp)
	LoraBase    string  `protobuf:"bytes,35,opt,name=LoraBase,proto3" json:"LoraBase,omitempty"`
	LoraAdapter string  `protobuf:"bytes,36,opt,name=LoraAdapter,proto3" json:"LoraAdapter,omitempty"`
	LoraScale   float32 `protobuf:"fixed32,42,opt,name=LoraScale,proto3" json:"LoraScale,omitempty"`
	NoMulMatQ   bool    `protobuf:"varint,37,opt,name=NoMulMatQ,proto3" json:"NoMulMatQ,omitempty"`
	DraftModel  string  `protobuf:"bytes,39,opt,name=DraftModel,proto3" json:"DraftModel,omitempty"`
	AudioPath   string  `protobuf:"bytes,38,opt,name=AudioPath,proto3" json:"AudioPath,omitempty"`
	// vllm
	Quantization         string            `protobuf:"bytes,40,opt,name=Quantization,proto3" json:"Quantization,omitempty"`
	GPUMemoryUtilization float32           `protobuf:"fixed32,50,opt,name=GPUMemoryUtilization,proto3" json:"GPUMemoryUtilization,omitempty"`
	TrustRemoteCode      bool              `protobuf:"varint,51,opt,name=TrustRemoteCode,proto3" json:"TrustRemoteCode,omitempty"`
	EnforceEager         bool              `protobuf:"varint,52,opt,name=EnforceEager,proto3" json:"EnforceEager,omitempty"`
	SwapSpace            int32             `protobuf:"varint,53,opt,name=SwapSpace,proto3" json:"SwapSpace,omitempty"`
	MaxModelLen          int32             `protobuf:"varint,54,opt,name=MaxModelLen,proto3" json:"MaxModelLen,omitempty"`
	TensorParallelSize   int32             `protobuf:"varint,55,opt,name=TensorParallelSize,proto3" json:"TensorParallelSize,omitempty"`
	LoadFormat           string            `protobuf:"bytes,58,opt,name=LoadFormat,proto3" json:"LoadFormat,omitempty"`
	DisableLogStatus     bool              `protobuf:"varint,66,opt,name=DisableLogStatus,proto3" json:"DisableLogStatus,omitempty"`
	DType                string            `protobuf:"bytes,67,opt,name=DType,proto3" json:"DType,omitempty"`
	LimitImagePerPrompt  int32             `protobuf:"varint,68,opt,name=LimitImagePerPrompt,proto3" json:"LimitImagePerPrompt,omitempty"`
	LimitVideoPerPrompt  int32             `protobuf:"varint,69,opt,name=LimitVideoPerPrompt,proto3" json:"LimitVideoPerPrompt,omitempty"`
	LimitAudioPerPrompt  int32             `protobuf:"varint,70,opt,name=LimitAudioPerPrompt,proto3" json:"LimitAudioPerPrompt,omitempty"`
	MMProj               string            `protobuf:"bytes,41,opt,name=MMProj,proto3" json:"MMProj,omitempty"`
	RopeScaling          string            `protobuf:"bytes,43,opt,name=RopeScaling,proto3" json:"RopeScaling,omitempty"`
	YarnExtFactor        float32           `protobuf:"fixed32,44,opt,name=YarnExtFactor,proto3" json:"YarnExtFactor,omitempty"`
	YarnAttnFactor       float32           `protobuf:"fixed32,45,opt,name=YarnAttnFactor,proto3" json:"YarnAttnFactor,omitempty"`
	YarnBetaFast         float32           `protobuf:"fixed32,46,opt,name=YarnBetaFast,proto3" json:"YarnBetaFast,omitempty"`
	YarnBetaSlow         float32           `protobuf:"fixed32,47,opt,name=YarnBetaSlow,proto3" json:"YarnBetaSlow,omitempty"`
	Type                 string            `protobuf:"bytes,49,opt,name=Type,proto3" json:"Type,omitempty"`
	FlashAttention       bool              `protobuf:"varint,56,opt,name=FlashAttention,proto3" json:"FlashAttention,omitempty"`
	NoKVOffload          bool              `protobuf:"varint,57,opt,name=NoKVOffload,proto3" json:"NoKVOffload,omitempty"`
	ModelPath            string            `protobuf:"bytes,59,opt,name=ModelPath,proto3" json:"ModelPath,omitempty"`
	LoraAdapters         []string          `protobuf:"bytes,60,rep,name=LoraAdapters,proto3" json:"LoraAdapters,omitempty"`
	LoraScales           []float32         `protobuf:"fixed32,61,rep,packed,name=LoraScales,proto3" json:"LoraScales,omitempty"`
	Options              []string          `protobuf:"bytes,62,rep,name=Options,proto3" json:"Options,omitempty"`
	CacheTypeKey         string            `protobuf:"bytes,63,opt,name=CacheTypeKey,proto3" json:"CacheTypeKey,omitempty"`
	CacheTypeValue       string            `protobuf:"bytes,64,opt,name=CacheTypeValue,proto3" json:"CacheTypeValue,omitempty"`
	GrammarTriggers      []*GrammarTrigger `protobuf:"bytes,65,rep,name=GrammarTriggers,proto3" json:"GrammarTriggers,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ModelOptions) Reset() {
	*x = ModelOptions{}
	mi := &file_backend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOptions) ProtoMessage() {}

func (x *ModelOptions) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOptions.ProtoReflect.Descriptor instead.
func (*ModelOptions) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{0}
}

func (x *ModelOptions) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ModelOptions) GetContextSize() int32 {
	if x != nil {
		return x.ContextSize
	}
	return 0
}

func (x *ModelOptions) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *ModelOptions) GetNBatch() int32 {
	if x != nil {
		return x.NBatch
	}
	return 0
}

func (x *ModelOptions) GetF16Memory() bool {
	if x != nil {
		return x.F16Memory
	}
	return false
}

func (x *ModelOptions) GetMLock() bool {
	if x != nil {
		return x.MLock
	}
	return false
}

func (x *ModelOptions) GetMMap() bool {
	if x != nil {
		return x.MMap
	}
	return false
}

func (x *ModelOptions) GetVocabOnly() bool {
	if x != nil {
		return x.VocabOnly
	}
	return false
}

func (x *ModelOptions) GetLowVRAM() bool {
	if x != nil {
		return x.LowVRAM
	}
	return false
}

func (x *ModelOptions) GetEmbeddings() bool {
	if x != nil {
		return x.Embeddings
	}
	return false
}

func (x *ModelOptions) GetNUMA() bool {
	if x != nil {
		return x.NUMA
	}
	return false
}

func (x *ModelOptions) GetNGPULayers() int32 {
	if x != nil {
		return x.NGPULayers
	}
	return 0
}

func (x *ModelOptions) GetMainGPU() string {
	if x != nil {
		return x.MainGPU
	}
	return ""
}

func (x *ModelOptions) GetTensorSplit() string {
	if x != nil {
		return x.TensorSplit
	}
	return ""
}

func (x *ModelOptions) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *ModelOptions) GetLibrarySearchPath() string {
	if x != nil {
		return x.LibrarySearchPath
	}
	return ""
}

func (x *ModelOptions) GetRopeFreqBase() float32 {
	if x != nil {
		return x.RopeFreqBase
	}
	return 0
}

func (x *ModelOptions) GetRopeFreqScale() float32 {
	if x != nil {
		return x.RopeFreqScale
	}
	return 0
}

func (x *ModelOptions) GetRMSNormEps() float32 {
	if x != nil {
		return x.RMSNormEps
	}
	return 0
}

func (x *ModelOptions) GetNGQA() int32 {
	if x != nil {
		return x.NGQA
	}
	return 0
}

func (x *ModelOptions) GetModelFile() string {
	if x != nil {
		return x.ModelFile
	}
	return ""
}

func (x *ModelOptions) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *ModelOptions) GetUseTriton() bool {
	if x != nil {
		return x.UseTriton
	}
	return false
}

func (x *ModelOptions) GetModelBaseName() string {
	if x != nil {
		return x.ModelBaseName
	}
	return ""
}

func (x *ModelOptions) GetUseFastTokenizer() bool {
	if x != nil {
		return x.UseFastTokenizer
	}
	return false
}

func (x *ModelOptions) GetPipelineType() string {
	if x != nil {
		return x.PipelineType
	}
	return ""
}

func (x *ModelOptions) GetSchedulerType() string {
	if x != nil {
		return x.SchedulerType
	}
	return ""
}

func (x *ModelOptions) GetCUDA() bool {
	if x != nil {
		return x.CUDA
	}
	return false
}

func (x *ModelOptions) GetCFGScale() float32 {
	if x != nil {
		return x.CFGScale
	}
	return 0
}

func (x *ModelOptions) GetIMG2IMG() bool {
	if x != nil {
		return x.IMG2IMG
	}
	return false
}

func (x *ModelOptions) GetCLIPModel() string {
	if x != nil {
		return x.CLIPModel
	}
	return ""
}

func (x *ModelOptions) GetCLIPSubfolder() string {
	if x != nil {
		return x.CLIPSubfolder
	}
	return ""
}

func (x *ModelOptions) GetCLIPSkip() int32 {
	if x != nil {
		return x.CLIPSkip
	}
	return 0
}

func (x *ModelOptions) GetControlNet() string {
	if x != nil {
		return x.ControlNet
	}
	return ""
}

func (x *ModelOptions) GetTokenizer() string {
	if x != nil {
		return x.Tokenizer
	}
	return ""
}

func (x *ModelOptions) GetLoraBase() string {
	if x != nil {
		return x.LoraBase
	}
	return ""
}

func (x *ModelOptions) GetLoraAdapter() string {
	if x != nil {
		return x.LoraAdapter
	}
	return ""
}

func (x *ModelOptions) GetLoraScale() float32 {
	if x != nil {
		return x.LoraScale
	}
	return 0
}

func (x *ModelOptions) GetNoMulMatQ() bool {
	if x != nil {
		return x.NoMulMatQ
	}
	return false
}

func (x *ModelOptions) GetDraftModel() string {
	if x != nil {
		return x.DraftModel
	}
	return ""
}

func (x *ModelOptions) GetAudioPath() string {
	if x != nil {
		return x.AudioPath
	}
	return ""
}

func (x *ModelOptions) GetQuantization() string {
	if x != nil {
		return x.Quantization
	}
	return ""
}

func (x *ModelOptions) GetGPUMemoryUtilization() float32 {
	if x != nil {
		return x.GPUMemoryUtilization
	}
	return 0
}

func (x *ModelOptions) GetTrustRemoteCode() bool {
	if x != nil {
		return x.TrustRemoteCode
	}
	return false
}

func (x *ModelOptions) GetEnforceEager() bool {
	if x != nil {
		return x.EnforceEager
	}
	return false
}

func (x *ModelOptions) GetSwapSpace() int32 {
	if x != nil {
		return x.SwapSpace
	}
	return 0
}

func (x *ModelOptions) GetMaxModelLen() int32 {
	if x != nil {
		return x.MaxModelLen
	}
	return 0
}

func (x *ModelOptions) GetTensorParallelSize() int32 {
	if x != nil {
		return x.TensorParallelSize
	}
	return 0
}

func (x *ModelOptions) GetLoadFormat() string {
	if x != nil {
		return x.LoadFormat
	}
	return ""
}

func (x *ModelOptions) GetDisableLogStatus() bool {
	if x != nil {
		return x.DisableLogStatus
	}
	return false
}

func (x *ModelOptions) GetDType() string {
	if x != nil {
		return x.DType
	}
	return ""
}

func (x *ModelOptions) GetLimitImagePerPrompt() int32 {
	if x != nil {
		return x.LimitImagePerPrompt
	}
	return 0
}

func (x *ModelOptions) GetLimitVideoPerPrompt() int32 {
	if x != nil {
		return x.LimitVideoPerPrompt
	}
	return 0
}

func (x *ModelOptions) GetLimitAudioPerPrompt() int32 {
	if x != nil {
		return x.LimitAudioPerPrompt
	}
	return 0
}

func (x *ModelOptions) GetMMProj() string {
	if x != nil {
		return x.MMProj
	}
	return ""
}

func (x *ModelOptions) GetRopeScaling() string {
	if x != nil {
		return x.RopeScaling
	}
	return ""
}

func (x *ModelOptions) GetYarnExtFactor() float32 {
	if x != nil {
		return x.YarnExtFactor
	}
	return 0
}

func (x *ModelOptions) GetYarnAttnFactor() float32 {
	if x != nil {
		return x.YarnAttnFactor
	}
	return 0
}

func (x *ModelOptions) GetYarnBetaFast() float32 {
	if x != nil {
		return x.YarnBetaFast
	}
	return 0
}

func (x *ModelOptions) GetYarnBetaSlow() float32 {
	if x != nil {
		return x.YarnBetaSlow
	}
	return 0
}

func (x *ModelOptions) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ModelOptions) GetFlashAttention() bool {
	if x != nil {
		return x.FlashAttention
	}
	return false
}

func (x *ModelOptions) GetNoKVOffload() bool {
	if x != nil {
		return x.NoKVOffload
	}
	return false
}

func (x *ModelOptions) GetModelPath() string {
	if x != nil {
		return x.ModelPath
	}
	return ""
}

func (x *ModelOptions) GetLoraAdapters() []string {
	if x != nil {
		return x.LoraAdapters
	}
	return nil
}

func (x *ModelOptions) GetLoraScales() []float32 {
	if x != nil {
		return x.LoraScales
	}
	return nil
}

func (x *ModelOptions) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ModelOptions) GetCacheTypeKey() string {
	if x != nil {
		return x.CacheTypeKey
	}
	return ""
}

func (x *ModelOptions) GetCacheTypeValue() string {
	if x != nil {
		return x.CacheTypeValue
	}
	return ""
}

func (x *ModelOptions) GetGrammarTriggers() []*GrammarTrigger {
	if x != nil {
		return x.GrammarTriggers
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Result) Reset() {
	*x = Result{}
	mi := &file_backend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{1}
}

func (x *Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Result) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GrammarTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Word          string                 `protobuf:"bytes,1,opt,name=word,proto3" json:"word,omitempty"`
	AtStart       bool                   `protobuf:"varint,2,opt,name=at_start,json=atStart,proto3" json:"at_start,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrammarTrigger) Reset() {
	*x = GrammarTrigger{}
	mi := &file_backend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrammarTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrammarTrigger) ProtoMessage() {}

func (x *GrammarTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrammarTrigger.ProtoReflect.Descriptor instead.
func (*GrammarTrigger) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{2}
}

func (x *GrammarTrigger) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *GrammarTrigger) GetAtStart() bool {
	if x != nil {
		return x.AtStart
	}
	return false
}

type Message struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Role          string                 `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_backend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Reply struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Message                []byte                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Tokens                 int32                  `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty"`
	PromptTokens           int32                  `protobuf:"varint,3,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	TimingPromptProcessing float64                `protobuf:"fixed64,4,opt,name=timing_prompt_processing,json=timingPromptProcessing,proto3" json:"timing_prompt_processing,omitempty"`
	TimingTokenGeneration  float64                `protobuf:"fixed64,5,opt,name=timing_token_generation,json=timingTokenGeneration,proto3" json:"timing_token_generation,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_backend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{4}
}

func (x *Reply) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Reply) GetTokens() int32 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Reply) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *Reply) GetTimingPromptProcessing() float64 {
	if x != nil {
		return x.TimingPromptProcessing
	}
	return 0
}

func (x *Reply) GetTimingTokenGeneration() float64 {
	if x != nil {
		return x.TimingTokenGeneration
	}
	return 0
}

type HealthMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthMessage) Reset() {
	*x = HealthMessage{}
	mi := &file_backend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthMessage) ProtoMessage() {}

func (x *HealthMessage) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthMessage.ProtoReflect.Descriptor instead.
func (*HealthMessage) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{5}
}

type PredictOptions struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Prompt               string                 `protobuf:"bytes,1,opt,name=Prompt,proto3" json:"Prompt,omitempty"`
	Seed                 int32                  `protobuf:"varint,2,opt,name=Seed,proto3" json:"Seed,omitempty"`
	Threads              int32                  `protobuf:"varint,3,opt,name=Threads,proto3" json:"Threads,omitempty"`
	Tokens               int32                  `protobuf:"varint,4,opt,name=Tokens,proto3" json:"Tokens,omitempty"`
	TopK                 int32                  `protobuf:"varint,5,opt,name=TopK,proto3" json:"TopK,omitempty"`
	Repeat               int32                  `protobuf:"varint,6,opt,name=Repeat,proto3" json:"Repeat,omitempty"`
	Batch                int32                  `protobuf:"varint,7,opt,name=Batch,proto3" json:"Batch,omitempty"`
	NKeep                int32                  `protobuf:"varint,8,opt,name=NKeep,proto3" json:"NKeep,omitempty"`
	Temperature          float32                `protobuf:"fixed32,9,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	Penalty              float32                `protobuf:"fixed32,10,opt,name=Penalty,proto3" json:"Penalty,omitempty"`
	F16KV                bool                   `protobuf:"varint,11,opt,name=F16KV,proto3" json:"F16KV,omitempty"`
	DebugMode            bool                   `protobuf:"varint,12,opt,name=DebugMode,proto3" json:"DebugMode,omitempty"`
	StopPrompts          []string               `protobuf:"bytes,13,rep,name=StopPrompts,proto3" json:"StopPrompts,omitempty"`
	IgnoreEOS            bool                   `protobuf:"varint,14,opt,name=IgnoreEOS,proto3" json:"IgnoreEOS,omitempty"`
	TailFreeSamplingZ    float32                `protobuf:"fixed32,15,opt,name=TailFreeSamplingZ,proto3" json:"TailFreeSamplingZ,omitempty"`
	TypicalP             float32                `protobuf:"fixed32,16,opt,name=TypicalP,proto3" json:"TypicalP,omitempty"`
	FrequencyPenalty     float32                `protobuf:"fixed32,17,opt,name=FrequencyPenalty,proto3" json:"FrequencyPenalty,omitempty"`
	PresencePenalty      float32                `protobuf:"fixed32,18,opt,name=PresencePenalty,proto3" json:"PresencePenalty,omitempty"`
	Mirostat             int32                  `protobuf:"varint,19,opt,name=Mirostat,proto3" json:"Mirostat,omitempty"`
	MirostatETA          float32                `protobuf:"fixed32,20,opt,name=MirostatETA,proto3" json:"MirostatETA,omitempty"`
	MirostatTAU          float32                `protobuf:"fixed32,21,opt,name=MirostatTAU,proto3" json:"MirostatTAU,omitempty"`
	PenalizeNL           bool                   `protobuf:"varint,22,opt,name=PenalizeNL,proto3" json:"PenalizeNL,omitempty"`
	LogitBias            string                 `protobuf:"bytes,23,opt,name=LogitBias,proto3" json:"LogitBias,omitempty"`
	MLock                bool                   `protobuf:"varint,25,opt,name=MLock,proto3" json:"MLock,omitempty"`
	MMap                 bool                   `protobuf:"varint,26,opt,name=MMap,proto3" json:"MMap,omitempty"`
	PromptCacheAll       bool                   `protobuf:"varint,27,opt,name=PromptCacheAll,proto3" json:"PromptCacheAll,omitempty"`
	PromptCacheRO        bool                   `protobuf:"varint,28,opt,name=PromptCacheRO,proto3" json:"PromptCacheRO,omitempty"`
	Grammar              string                 `protobuf:"bytes,29,opt,name=Grammar,proto3" json:"Grammar,omitempty"`
	MainGPU              string                 `protobuf:"bytes,30,opt,name=MainGPU,proto3" json:"MainGPU,omitempty"`
	TensorSplit          string                 `protobuf:"bytes,31,opt,name=TensorSplit,proto3" json:"TensorSplit,omitempty"`
	TopP                 float32                `protobuf:"fixed32,32,opt,name=TopP,proto3" json:"TopP,omitempty"`
	PromptCachePath      string                 `protobuf:"bytes,33,opt,name=PromptCachePath,proto3" json:"PromptCachePath,omitempty"`
	Debug                bool                   `protobuf:"varint,34,opt,name=Debug,proto3" json:"Debug,omitempty"`
	EmbeddingTokens      []int32                `protobuf:"varint,35,rep,packed,name=EmbeddingTokens,proto3" json:"EmbeddingTokens,omitempty"`
	Embeddings           string                 `protobuf:"bytes,36,opt,name=Embeddings,proto3" json:"Embeddings,omitempty"`
	RopeFreqBase         float32                `protobuf:"fixed32,37,opt,name=RopeFreqBase,proto3" json:"RopeFreqBase,omitempty"`
	RopeFreqScale        float32                `protobuf:"fixed32,38,opt,name=RopeFreqScale,proto3" json:"RopeFreqScale,omitempty"`
	NegativePromptScale  float32                `protobuf:"fixed32,39,opt,name=NegativePromptScale,proto3" json:"NegativePromptScale,omitempty"`
	NegativePrompt       string                 `protobuf:"bytes,40,opt,name=NegativePrompt,proto3" json:"NegativePrompt,omitempty"`
	NDraft               int32                  `protobuf:"varint,41,opt,name=NDraft,proto3" json:"NDraft,omitempty"`
	Images               []string               `protobuf:"bytes,42,rep,name=Images,proto3" json:"Images,omitempty"`
	UseTokenizerTemplate bool                   `protobuf:"varint,43,opt,name=UseTokenizerTemplate,proto3" json:"UseTokenizerTemplate,omitempty"`
	Messages             []*Message             `protobuf:"bytes,44,rep,name=Messages,proto3" json:"Messages,omitempty"`
	Videos               []string               `protobuf:"bytes,45,rep,name=Videos,proto3" json:"Videos,omitempty"`
	Audios               []string               `protobuf:"bytes,46,rep,name=Audios,proto3" json:"Audios,omitempty"`
	CorrelationId        string                 `protobuf:"bytes,47,opt,name=CorrelationId,proto3" json:"CorrelationId,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PredictOptions) Reset() {
	*x = PredictOptions{}
	mi := &file_backend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PredictOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictOptions) ProtoMessage() {}

func (x *PredictOptions) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictOptions.ProtoReflect.Descriptor instead.
func (*PredictOptions) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{6}
}

func (x *PredictOptions) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *PredictOptions) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *PredictOptions) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

func (x *PredictOptions) GetTokens() int32 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *PredictOptions) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *PredictOptions) GetRepeat() int32 {
	if x != nil {
		return x.Repeat
	}
	return 0
}

func (x *PredictOptions) GetBatch() int32 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *PredictOptions) GetNKeep() int32 {
	if x != nil {
		return x.NKeep
	}
	return 0
}

func (x *PredictOptions) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *PredictOptions) GetPenalty() float32 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *PredictOptions) GetF16KV() bool {
	if x != nil {
		return x.F16KV
	}
	return false
}

func (x *PredictOptions) GetDebugMode() bool {
	if x != nil {
		return x.DebugMode
	}
	return false
}

func (x *PredictOptions) GetStopPrompts() []string {
	if x != nil {
		return x.StopPrompts
	}
	return nil
}

func (x *PredictOptions) GetIgnoreEOS() bool {
	if x != nil {
		return x.IgnoreEOS
	}
	return false
}

func (x *PredictOptions) GetTailFreeSamplingZ() float32 {
	if x != nil {
		return x.TailFreeSamplingZ
	}
	return 0
}

func (x *PredictOptions) GetTypicalP() float32 {
	if x != nil {
		return x.TypicalP
	}
	return 0
}

func (x *PredictOptions) GetFrequencyPenalty() float32 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *PredictOptions) GetPresencePenalty() float32 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *PredictOptions) GetMirostat() int32 {
	if x != nil {
		return x.Mirostat
	}
	return 0
}

func (x *PredictOptions) GetMirostatETA() float32 {
	if x != nil {
		return x.MirostatETA
	}
	return 0
}

func (x *PredictOptions) GetMirostatTAU() float32 {
	if x != nil {
		return x.MirostatTAU
	}
	return 0
}

func (x *PredictOptions) GetPenalizeNL() bool {
	if x != nil {
		return x.PenalizeNL
	}
	return false
}

func (x *PredictOptions) GetLogitBias() string {
	if x != nil {
		return x.LogitBias
	}
	return ""
}

func (x *PredictOptions) GetMLock() bool {
	if x != nil {
		return x.MLock
	}
	return false
}

func (x *PredictOptions) GetMMap() bool {
	if x != nil {
		return x.MMap
	}
	return false
}

func (x *PredictOptions) GetPromptCacheAll() bool {
	if x != nil {
		return x.PromptCacheAll
	}
	return false
}

func (x *PredictOptions) GetPromptCacheRO() bool {
	if x != nil {
		return x.PromptCacheRO
	}
	return false
}

func (x *PredictOptions) GetGrammar() string {
	if x != nil {
		return x.Grammar
	}
	return ""
}

func (x *PredictOptions) GetMainGPU() string {
	if x != nil {
		return x.MainGPU
	}
	return ""
}

func (x *PredictOptions) GetTensorSplit() string {
	if x != nil {
		return x.TensorSplit
	}
	return ""
}

func (x *PredictOptions) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *PredictOptions) GetPromptCachePath() string {
	if x != nil {
		return x.PromptCachePath
	}
	return ""
}

func (x *PredictOptions) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *PredictOptions) GetEmbeddingTokens() []int32 {
	if x != nil {
		return x.EmbeddingTokens
	}
	return nil
}

func (x *PredictOptions) GetEmbeddings() string {
	if x != nil {
		return x.Embeddings
	}
	return ""
}

func (x *PredictOptions) GetRopeFreqBase() float32 {
	if x != nil {
		return x.RopeFreqBase
	}
	return 0
}

func (x *PredictOptions) GetRopeFreqScale() float32 {
	if x != nil {
		return x.RopeFreqScale
	}
	return 0
}

func (x *PredictOptions) GetNegativePromptScale() float32 {
	if x != nil {
		return x.NegativePromptScale
	}
	return 0
}

func (x *PredictOptions) GetNegativePrompt() string {
	if x != nil {
		return x.NegativePrompt
	}
	return ""
}

func (x *PredictOptions) GetNDraft() int32 {
	if x != nil {
		return x.NDraft
	}
	return 0
}

func (x *PredictOptions) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *PredictOptions) GetUseTokenizerTemplate() bool {
	if x != nil {
		return x.UseTokenizerTemplate
	}
	return false
}

func (x *PredictOptions) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *PredictOptions) GetVideos() []string {
	if x != nil {
		return x.Videos
	}
	return nil
}

func (x *PredictOptions) GetAudios() []string {
	if x != nil {
		return x.Audios
	}
	return nil
}

func (x *PredictOptions) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

type MemoryUsageData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint64                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Breakdown     map[string]uint64      `protobuf:"bytes,2,rep,name=breakdown,proto3" json:"breakdown,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryUsageData) Reset() {
	*x = MemoryUsageData{}
	mi := &file_backend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUsageData) ProtoMessage() {}

func (x *MemoryUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUsageData.ProtoReflect.Descriptor instead.
func (*MemoryUsageData) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{7}
}

func (x *MemoryUsageData) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MemoryUsageData) GetBreakdown() map[string]uint64 {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         StatusResponse_State   `protobuf:"varint,1,opt,name=state,proto3,enum=StatusResponse_State" json:"state,omitempty"`
	Memory        *MemoryUsageData       `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_backend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_backend_proto_rawDescGZIP(), []int{8}
}

func (x *StatusResponse) GetState() StatusResponse_State {
	if x != nil {
		return x.State
	}
	return StatusResponse_UNINITIALIZED
}

func (x *StatusResponse) GetMemory() *MemoryUsageData {
	if x != nil {
		return x.Memory
	}
	return nil
}

var File_backend_proto protoreflect.FileDescriptor

var file_backend_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x97, 0x12, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x31, 0x36, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x46, 0x31, 0x36, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x4d, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x4d, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x6f,
	0x77, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4c, 0x6f, 0x77,
	0x56, 0x52, 0x41, 0x4d, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x55, 0x4d, 0x41, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x4e, 0x55, 0x4d, 0x41, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x47, 0x50, 0x55,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x47,
	0x50, 0x55, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6e,
	0x47, 0x50, 0x55, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x69, 0x6e, 0x47,
	0x50, 0x55, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65, 0x71, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65,
	0x71, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x4d, 0x53, 0x4e, 0x6f, 0x72,
	0x6d, 0x45, 0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x52, 0x4d, 0x53, 0x4e,
	0x6f, 0x72, 0x6d, 0x45, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x47, 0x51, 0x41, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4e, 0x47, 0x51, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x54, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x73, 0x65, 0x54, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x55, 0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x55,
	0x44, 0x41, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x43, 0x55, 0x44, 0x41, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x46, 0x47, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x43, 0x46, 0x47, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x4d,
	0x47, 0x32, 0x49, 0x4d, 0x47, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x4d, 0x47,
	0x32, 0x49, 0x4d, 0x47, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x4c, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x4c, 0x49, 0x50, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x50, 0x53, 0x75, 0x62, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x4c, 0x49, 0x50, 0x53,
	0x75, 0x62, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x4c, 0x49, 0x50,
	0x53, 0x6b, 0x69, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x4c, 0x49, 0x50,
	0x53, 0x6b, 0x69, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4e,
	0x65, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4e, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x72, 0x61, 0x42, 0x61, 0x73, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x72, 0x61, 0x42, 0x61, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x6f, 0x72, 0x61, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x6f, 0x72, 0x61, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4e, 0x6f, 0x4d, 0x75, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x4e, 0x6f, 0x4d, 0x75, 0x6c, 0x4d, 0x61, 0x74, 0x51, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x14, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x47, 0x50,
	0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x61, 0x67, 0x65, 0x72, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x77, 0x61, 0x70, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x65, 0x6e, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x65, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c,
	0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x44, 0x54, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x4d, 0x50, 0x72,
	0x6f, 0x6a, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x4d, 0x50, 0x72, 0x6f, 0x6a,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x6f, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x61, 0x72, 0x6e, 0x45, 0x78, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x59, 0x61, 0x72, 0x6e, 0x45,
	0x78, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x59, 0x61, 0x72, 0x6e,
	0x41, 0x74, 0x74, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x59, 0x61, 0x72, 0x6e, 0x41, 0x74, 0x74, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x59, 0x61, 0x72, 0x6e, 0x42, 0x65, 0x74, 0x61, 0x46, 0x61, 0x73, 0x74,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x59, 0x61, 0x72, 0x6e, 0x42, 0x65, 0x74, 0x61,
	0x46, 0x61, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x59, 0x61, 0x72, 0x6e, 0x42, 0x65, 0x74, 0x61,
	0x53, 0x6c, 0x6f, 0x77, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x59, 0x61, 0x72, 0x6e,
	0x42, 0x65, 0x74, 0x61, 0x53, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x4b, 0x56, 0x4f, 0x66, 0x66, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4e, 0x6f, 0x4b, 0x56, 0x4f,
	0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x72, 0x61, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x6f, 0x72, 0x61,
	0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x72, 0x61,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x4c, 0x6f,
	0x72, 0x61, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39,
	0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0f, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61,
	0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x3f, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x6d, 0x6d,
	0x61, 0x72, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x37, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa4, 0x0b, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x70, 0x4b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x6f, 0x70, 0x4b, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x4b, 0x65, 0x65,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4e, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x31,
	0x36, 0x4b, 0x56, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x46, 0x31, 0x36, 0x4b, 0x56,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x4f, 0x53, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x4f, 0x53, 0x12, 0x2c,
	0x0a, 0x11, 0x54, 0x61, 0x69, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5a, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x54, 0x61, 0x69, 0x6c, 0x46,
	0x72, 0x65, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5a, 0x12, 0x1a, 0x0a, 0x08,
	0x54, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x54, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x4d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x69,
	0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x45, 0x54, 0x41, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x4d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x45, 0x54, 0x41, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x54, 0x41, 0x55, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x4d, 0x69, 0x72, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x54, 0x41, 0x55, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x4c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4e, 0x4c, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4d, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x4d, 0x61, 0x70, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x4d, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x4f, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x72, 0x61, 0x6d, 0x6d, 0x61, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x50, 0x55, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x50, 0x55, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f,
	0x70, 0x50, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x54, 0x6f, 0x70, 0x50, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x6f, 0x70, 0x65,
	0x46, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65, 0x71, 0x42, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65, 0x71, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x52, 0x6f, 0x70, 0x65, 0x46, 0x72, 0x65, 0x71, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4e, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x2a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x55, 0x73, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x2c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73,
	0x18, 0x2d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a,
	0x0f, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x43, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53,
	0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x32, 0xd5, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x22,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x06, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x25, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x0d, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x07, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x06, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x2c, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x0f, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x06, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2b, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x61, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x2f, 0x61, 0x69, 0x72, 0x74, 0x48, 0x69, 0x76,
	0x65, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_backend_proto_rawDescOnce sync.Once
	file_backend_proto_rawDescData []byte
)

func file_backend_proto_rawDescGZIP() []byte {
	file_backend_proto_rawDescOnce.Do(func() {
		file_backend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_backend_proto_rawDesc), len(file_backend_proto_rawDesc)))
	})
	return file_backend_proto_rawDescData
}

var file_backend_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_backend_proto_goTypes = []any{
	(StatusResponse_State)(0), // 0: StatusResponse.State
	(*ModelOptions)(nil),      // 1: ModelOptions
	(*Result)(nil),            // 2: Result
	(*GrammarTrigger)(nil),    // 3: GrammarTrigger
	(*Message)(nil),           // 4: Message
	(*Reply)(nil),             // 5: Reply
	(*HealthMessage)(nil),     // 6: HealthMessage
	(*PredictOptions)(nil),    // 7: PredictOptions
	(*MemoryUsageData)(nil),   // 8: MemoryUsageData
	(*StatusResponse)(nil),    // 9: StatusResponse
	nil,                       // 10: MemoryUsageData.BreakdownEntry
}
var file_backend_proto_depIdxs = []int32{
	3,  // 0: ModelOptions.GrammarTriggers:type_name -> GrammarTrigger
	4,  // 1: PredictOptions.Messages:type_name -> Message
	10, // 2: MemoryUsageData.breakdown:type_name -> MemoryUsageData.BreakdownEntry
	0,  // 3: StatusResponse.state:type_name -> StatusResponse.State
	8,  // 4: StatusResponse.memory:type_name -> MemoryUsageData
	6,  // 5: Backend.Health:input_type -> HealthMessage
	1,  // 6: Backend.LoadModel:input_type -> ModelOptions
	7,  // 7: Backend.Predict:input_type -> PredictOptions
	7,  // 8: Backend.PredictStream:input_type -> PredictOptions
	6,  // 9: Backend.Status:input_type -> HealthMessage
	5,  // 10: Backend.Health:output_type -> Reply
	2,  // 11: Backend.LoadModel:output_type -> Result
	5,  // 12: Backend.Predict:output_type -> Reply
	5,  // 13: Backend.PredictStream:output_type -> Reply
	9,  // 14: Backend.Status:output_type -> StatusResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_backend_proto_init() }
func file_backend_proto_init() {
	if File_backend_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_backend_proto_rawDesc), len(file_backend_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_proto_goTypes,
		DependencyIndexes: file_backend_proto_depIdxs,
		EnumInfos:         file_backend_proto_enumTypes,
		MessageInfos:      file_backend_proto_msgTypes,
	}.Build()
	File_backend_proto = out.File
	file_backend_proto_goTypes = nil
	file_backend_proto_depIdxs = nil
}
